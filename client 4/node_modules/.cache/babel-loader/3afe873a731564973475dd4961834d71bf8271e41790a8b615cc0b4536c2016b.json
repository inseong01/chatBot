{"ast":null,"code":"import supabase from \"./supabase/supabaseClient.js\";\n\n// join a room\nconst channelB = supabase.channel('room-one', {\n  config: {\n    broadcast: {\n      self: true\n    }\n  }\n});\n\n// function to log any messages we receive\nfunction messageReceived(payload) {\n  console.log(payload);\n}\n\n// subscribe to the room\n\nchannelB.subscribe(status => {\n  // Wait for successful connection\n  if (status !== 'SUBSCRIBED') {\n    return null;\n  }\n  channelB.send({\n    type: 'broadcast',\n    event: 'test',\n    payload: {\n      message: 'hello, world. this is B'\n    }\n  });\n});","map":{"version":3,"names":["supabase","channelB","channel","config","broadcast","self","messageReceived","payload","console","log","subscribe","status","send","type","event","message"],"sources":["C:/Users/Inseong/Desktop/folder/project/chat-bot/client 4/src/index.js"],"sourcesContent":["import supabase from \"./supabase/supabaseClient.js\";\r\n\r\n// join a room\r\nconst channelB = supabase.channel('room-one', {\r\n  config: {\r\n    broadcast: { self: true }\r\n  }\r\n});\r\n\r\n// function to log any messages we receive\r\nfunction messageReceived(payload) {\r\n  console.log(payload);\r\n}\r\n\r\n// subscribe to the room\r\n\r\nchannelB.subscribe((status) => {\r\n  // Wait for successful connection\r\n  if (status !== 'SUBSCRIBED') {\r\n    return null\r\n  }\r\n  channelB.send({\r\n    type: 'broadcast',\r\n    event: 'test',\r\n    payload: { message: 'hello, world. this is B' },\r\n  })\r\n})"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,8BAA8B;;AAEnD;AACA,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,OAAO,CAAC,UAAU,EAAE;EAC5CC,MAAM,EAAE;IACNC,SAAS,EAAE;MAAEC,IAAI,EAAE;IAAK;EAC1B;AACF,CAAC,CAAC;;AAEF;AACA,SAASC,eAAeA,CAACC,OAAO,EAAE;EAChCC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;AACtB;;AAEA;;AAEAN,QAAQ,CAACS,SAAS,CAAEC,MAAM,IAAK;EAC7B;EACA,IAAIA,MAAM,KAAK,YAAY,EAAE;IAC3B,OAAO,IAAI;EACb;EACAV,QAAQ,CAACW,IAAI,CAAC;IACZC,IAAI,EAAE,WAAW;IACjBC,KAAK,EAAE,MAAM;IACbP,OAAO,EAAE;MAAEQ,OAAO,EAAE;IAA0B;EAChD,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}