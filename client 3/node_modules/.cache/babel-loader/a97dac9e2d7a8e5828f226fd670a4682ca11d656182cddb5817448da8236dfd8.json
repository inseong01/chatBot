{"ast":null,"code":"import supabase from \"./supabase/supabaseClient.js\";\n\n// join a room\nconst roomOne = supabase.channel('room-one', {\n  config: {\n    broadcast: {\n      self: true\n    }\n  }\n});\n\n// subscribe to the room\nroomOne.on('presence', {\n  event: 'sync'\n}, () => {\n  const newState = roomOne.presenceState();\n  console.log('sync', newState);\n}).on('presence', {\n  event: 'join'\n}, ({\n  key,\n  newPresences\n}) => {\n  console.log('join', key, newPresences);\n}).on('presence', {\n  event: 'leave'\n}, ({\n  key,\n  leftPresences\n}) => {\n  console.log('leave', key, leftPresences);\n}).subscribe();\nconst userStatus = {\n  user: 'user-1',\n  online_at: new Date().toISOString()\n};\nroomOne.subscribe(async status => {\n  if (status !== 'SUBSCRIBED') return;\n  const presenceTrackStatus = await roomOne.track(userStatus);\n  console.log(presenceTrackStatus);\n});","map":{"version":3,"names":["supabase","roomOne","channel","config","broadcast","self","on","event","newState","presenceState","console","log","key","newPresences","leftPresences","subscribe","userStatus","user","online_at","Date","toISOString","status","presenceTrackStatus","track"],"sources":["C:/Users/Inseong/Desktop/folder/project/chat-bot/client 3/src/index.js"],"sourcesContent":["import supabase from \"./supabase/supabaseClient.js\";\r\n\r\n// join a room\r\nconst roomOne = supabase.channel('room-one', {\r\n  config: {\r\n    broadcast: { self: true }\r\n  }\r\n});\r\n\r\n// subscribe to the room\r\nroomOne\r\n  .on(\r\n    'presence',\r\n    { event: 'sync' },\r\n    () => {\r\n      const newState = roomOne.presenceState()\r\n      console.log('sync', newState)\r\n    }\r\n  )\r\n  .on('presence', { event: 'join' }, ({ key, newPresences }) => {\r\n    console.log('join', key, newPresences)\r\n  })\r\n  .on('presence', { event: 'leave' }, ({ key, leftPresences }) => {\r\n    console.log('leave', key, leftPresences)\r\n  })\r\n  .subscribe()\r\n\r\nconst userStatus = {\r\n  user: 'user-1',\r\n  online_at: new Date().toISOString(),\r\n}\r\n\r\nroomOne.subscribe(async (status) => {\r\n  if (status !== 'SUBSCRIBED') return;\r\n\r\n  const presenceTrackStatus = await roomOne.track(userStatus)\r\n  console.log(presenceTrackStatus);\r\n})"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,8BAA8B;;AAEnD;AACA,MAAMC,OAAO,GAAGD,QAAQ,CAACE,OAAO,CAAC,UAAU,EAAE;EAC3CC,MAAM,EAAE;IACNC,SAAS,EAAE;MAAEC,IAAI,EAAE;IAAK;EAC1B;AACF,CAAC,CAAC;;AAEF;AACAJ,OAAO,CACJK,EAAE,CACD,UAAU,EACV;EAAEC,KAAK,EAAE;AAAO,CAAC,EACjB,MAAM;EACJ,MAAMC,QAAQ,GAAGP,OAAO,CAACQ,aAAa,CAAC,CAAC;EACxCC,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEH,QAAQ,CAAC;AAC/B,CACF,CAAC,CACAF,EAAE,CAAC,UAAU,EAAE;EAAEC,KAAK,EAAE;AAAO,CAAC,EAAE,CAAC;EAAEK,GAAG;EAAEC;AAAa,CAAC,KAAK;EAC5DH,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEC,GAAG,EAAEC,YAAY,CAAC;AACxC,CAAC,CAAC,CACDP,EAAE,CAAC,UAAU,EAAE;EAAEC,KAAK,EAAE;AAAQ,CAAC,EAAE,CAAC;EAAEK,GAAG;EAAEE;AAAc,CAAC,KAAK;EAC9DJ,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEC,GAAG,EAAEE,aAAa,CAAC;AAC1C,CAAC,CAAC,CACDC,SAAS,CAAC,CAAC;AAEd,MAAMC,UAAU,GAAG;EACjBC,IAAI,EAAE,QAAQ;EACdC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;AACpC,CAAC;AAEDnB,OAAO,CAACc,SAAS,CAAC,MAAOM,MAAM,IAAK;EAClC,IAAIA,MAAM,KAAK,YAAY,EAAE;EAE7B,MAAMC,mBAAmB,GAAG,MAAMrB,OAAO,CAACsB,KAAK,CAACP,UAAU,CAAC;EAC3DN,OAAO,CAACC,GAAG,CAACW,mBAAmB,CAAC;AAClC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}