2024.9.13.

supabase 1 on 1 chat

	Postgres Changes
	- filter: 'id = ...'

	Broadcast
	- channel(...)

	현재 모든 사람들이 한 방에 있음
	1:1 위한 방 필요
	관리자는 여러 방, 고객은 하나의 방

	방을 구현하기 위해 
	고객은 channel()로 방 생성
	관리자는 channel()로 방 입장

	Broadcast는 메시지 저장되지 않음
	
	Postgres Changes 사용
	() 방문자 테이블 생성, 방문자에게 고유 방id 부여
	(v) Postgres messages 테이블 sender, receiver 속성을 type으로 통합
		: client는 admin 메시지를 받고 admin은 client 메시지를 받음

	"client"
	방문자 사이트 접속 시 임의 방id 부여, 세션스토리지에 방id 저장
		- id: uuid 타입으로 생성(SQL editor: alter table, add columns)
	접속한 방 하나만 표시

	"admin"
	생성된 방 목록 표시

구현
	1. 접속인원 공통된 방에서 관리
		방문자(클라이언트)
			- 관리자에게 상태 전달 : Sending state

		관리자(서버)
			- 방문자 추척 : Sync and track state
				sync : 현재 방 인원 알림
				join : 방문자 접속 알림
					- 'user_status' 테이블에 방문자 정보 저장
					- 새로고침, 중복 삽입 문제 
						: sessionStorage보다 js 파일에서 sql 설정
						insert -> upsert 수정, onConflict 추가
				leave : 방문자 떠남 알림
					- 'user status' 테이블 방문자 정보 갱신
	>> 웹 나가면 offline, 접속하면 새로운 id로 online, 새로고침 중복 삽입 제한
		
	2. 고유 채팅방id 생성
	: 어디서? SQL? 클라이언트?
		- SQL: 'user_status'에서 고유값 자동 생성/변함 없음, 값 받아오려면 이벤트 필요
		- 클라이언트: 고유값 생성하면 바로 입장 가능, 새로고침 하면 값 변환됨(세션활용)
		- 관리자: 방문자 고유 presence_ref 값 보안 이유로 사용 안 함
	>> 클라이언트에서 uuid 생성, SQL 삽입할 때 중복 걸러짐, 세션활용 X

	3. client 방 생성/입장
		- 방 생성/입장
		: 메시지 창, SQL 해당 방 ID 메시지만 불러옴
		
	4. admin 방 목록 생성/방 입장
		- 방 목록 생성
		: 관리자는 메시지를 해당 room_id 방으로 발신한다.
		 client로부터 메시지를 수신하려면 해당 room_id 방이 따로 구현되어야 한다.
		
	<--- 채팅방 목록 데이터 연결 --->
	5. 채팅 접속자 현황 목록
		'presence {event: 'join'}'  접속자 배열 추가, 접속자 목록 컴포넌트 반복 생성
		'presence {event: 'sync'}' : 리렌더링 발생, 기록 저장하기 위해 'join'으로 변경
		**event 변경해도 재접속으로 컴포넌트 key 중복 발생 지속**

	7. 메시지 수신/발신
		sendMessage() insert  SQL에 room_id 조건 추가 - 메시지 발신

		- client
		room_id 동일해야 insert 이벤트 동작 - 메시지 수신	
		- admin
		채팅방 클릭하면 해당 방ID 메시지 SQL로 불러옴, 
		roomId 변경되면 insert 이벤트 id 맞게 불러오게 변경: 모든 메시지 받는 오류 수정
		-> 모든 메시지 받아서 거르는 것 / 매번 구독 변경하는 것 무엇이 효율적인가?
		
	8. 메시지 상태 1
		message 테이블, is_read: false 속성 생성 > 읽을 때 is_read: true 갱신
		: 읽는 상황 부여 - admin, client 입력창에 포커스 할 때(조건 수정 가능) 
		**RLS Enable 되어 있다면 기능 허용 설정**
		** { data, error } 값 받으려면 뒤에 .select() 추가 **

	<--- 메시지 정보 업데이트, 메시지 순서 바뀜 --->
	9. 메시지 상태 2
	: 입력창(footer) 선택되고 있을 때(true) 읽음, 다른 곳 선택(false)
		- user_type: 발신인 구분하여 읽음 갱신
		- order('id') 메시지 생성 순으로 정렬
	
	10. 메시지 정보 불러오기 & 덮어씌우기
	: update 구독 부분,  일치하는 id와 데이터 덮어씌우기 함수 생성
	setState(prev => ()), update 데이터와 prev 배열과 일치하는 값 덮어씌움
	
	11. 메시지 상태 스타일링
	: last-child 가상요소로 상황에 맞춰 className 변화

	12. 유저 상태 1
	: 본인 입력창에 문자가 있으면 상대방에게 '입력중' 출력
	user_status 정보 업데이트

	13. 입력중 출력 및 스타일링
	: 실시간 업데이트 상태에 따라 && 논리 연산자로 '입력중' 출력, undefined '?.' 처리
	CSS 애니메이션 설정	
		- 업데이트가 쿼리가 동작해도 받아올 수 없는 문제
		: Realtime Enable 활성화 필요
		- 입력 중 true 중복 업데이트/리렌더링 방지
		: 문자열 수 조건 설정
		-> 근본 원인: 재접속 쿼리 중복 생성(offline client/admin 열이 많음)
	
	<--- client, 입력중 출력 적용, 입력중 새로고침 시 적용되는 문제 수정 --->

참고자료
	- supabase Presence
	https://supabase.com/docs/guides/realtime/presence?queryGroups=language&language=js
	- uuid
	https://docs.tosspayments.com/resources/glossary/uuid
	- supabase javascript API
	https://supabase.com/docs/reference/javascript/upsert

